parameters:
    app.api_token: '%env(resolve:APP_API_TOKEN)%'
    messenger.serializer: RabbitMessengerBundle\Infrastructure\Serializer\MessengerSerializer

services:
    _defaults:
        autowire: true
        autoconfigure: true
        bind:
            $messengerAuditLogger: '@monolog.logger.messenger_audit'
    App\:
        resource: '../src/*'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Form/Model'

    App\Shared\Infrastructure\Symfony\ApiExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\Books\Domain\BookFileManagerInterface: '@App\Books\Infrastructure\Uploader\LocalBookFileManager'

    App\Shared\Infrastructure\Symfony\HttpClientInterface: '@App\Shared\Infrastructure\Symfony\HttpClient'

    _instanceof:
        App\Shared\Domain\Bus\Command\CommandHandler:
            tags: [ { name: messenger.message_handler, bus: messenger.command.bus } ]
        App\Shared\Domain\Bus\Query\QueryHandler:
            tags: [ { name: messenger.message_handler, bus: messenger.query.bus } ]

    App\Books\Infrastructure\Handlers\BookCreatedDomainEventHandler:
        tags: [ { name: messenger.message_handler, fromTransport: 'librarify_book_created_subscriber' } ]
    App\Books\Infrastructure\Handlers\BookDeletedDomainEventHandler:
        tags: [ { name: messenger.message_handler, fromTransport: 'librarify_book_deleted_subscriber' } ]
    App\Books\Infrastructure\Handlers\BookUpdatedDomainEventHandler:
        tags: [ { name: messenger.message_handler, fromTransport: 'librarify_book_updated_subscriber' } ]

    App\Shared\Infrastructure\Event\DomainEventMapper:
        public: true  # Ensure the mapper is accessible

    RabbitMessengerBundle\Domain\Event\Mapper\DomainEventMapperInterface: '@App\Shared\Infrastructure\Event\DomainEventMapper'
